Nom    : SAOUDI
Prénom : Younes
Groupe : 1SN Groupe D
--------------------------------------------------------------------------------


Consigne : Dans ce fichier, il faut répondre à la place des "..." et sur les
lignes qui les suivent.  Le texte déjà écrit doit être conservé !

=====[ Temps passé ]============================================================

Ces informations de temps sont demandées à titre indicatif et ne sont pas
prises en compte dans la notation du projet.

Toutes les durées sont à saisir en heures.  Par exemple, si vous avez passé
1h45, il faudra indiquer 1.75.  Si vous avez passé 2h30, il faudra indiquer
2.5.

Temps total passé sur ce mini-projet (en h) : ...
Temps passé sur les raffinages (en h) : ~ 3.0

=====[ Raffinages ]=============================================================

-- Ne donner que les niveaux de raffinages qui sont informatifs.   Il est
-- généralement inutile de donner le dernier niveau de raffinage s'il ne
-- contient pas d'étapes non élémentaires.


R0 :-- Programme qui aide l'utilisateur à réviser les tables de multiplication.

R1 : Comment R0?
    -- L'utilisateur choisit la colonne de la table, le nombre de droite est aléatoire. 
    -- Il saisit le résultat de chaque opération qui sera évalué (Bonne ou mauvaise réponse). 
    -- Une fois que 10 multiplications sont réalisées pour une table spécifique, des incitations et conseils seront affichés selon le nombre de bonnes réponses. 
    -- Les temps de réponse pour chaque multiplication seront évalués et leur valeur maximum comparée au temps de réponse moyen pour fournir plus de conseils. 


Exemples : On ne donnera pas d'exemples d'utilisation


R2 : Comment R0?
     Début    
        Répéter             
             Afficher "Table à réviser: "
             Lire la table saisie par l'utilisateur (in)
             Si table>10 ou table<1 alors 
                redemander table --Révision des tables de 1 à 10
             --Il s'agira d'une boucle Tant que
             Sinon
                 Pour i de 1 à 10 faire       
                    Générer le nombre de droite compris entre 1 et 10 de façon aléatoire (out)
                    Afficher l'opération à l'utilisateur
                    Demander le résultat à l'utilisateur puis l'évaluer (in)
                    Evaluer le temps de réponse
                 Fin Pour 
             Fin Si
             Afficher des conseils et incitations selon le nombre de bonnes réponses.
             Comparer le temps de réponse maximale avec le temps de réponse moyen.
             Si au moins 1 seconde de plus que le temps moyen alors
                Dire à l'utilisateur qu'il doit réviser la table de multiplication du nombre de droite pour la multiplication qui a pris le plus de temps
             Sinon 
                Rien
             Fin Si
             Demander si l'utilisateur veut continuer ou arrêter
             Si continuer alors 
                Rien
             Sinon 
                choix="arrêt"
             Fin Si
        Jusqu'à choix="arrêt"
        Fin Répeter
     Fin
         
R3 : Comment afficher le nombre de droite aléatoirement 10 fois?    
    Max_Delay <-0.0 --le temps maximum pris pour que l'utilsateur réalise une opération (IN/OUT)
    Sum_Delay <-0.0 --la somme des délais pris pour chaque opération d'une table spécifique (IN/OUT)
    false_nbr <- 0  -- le nombre de réponses fausses (IN/OUT)
    --Les trois dernières variables doivent être réinitialisées après chaque 10 opérations
    Ecrire("Réviser la table de: ")
    Lire(table) (IN)
    Tant que table>10 ou table<1 faire --Révision des tables de 1 à 10
        Ecrire("Saisissez une table de multiplication entre 1 et 10 : ")
        Lire(table)
    Fin Tant que        
    Pour i de 1 à 10 faire
        Get_Random_Number(rhs) --nombre de droite généré aléatoirement entre 1 et 10 (IN)
        Ecrire("(Multip. ", i , ")" , table , " * " ,rhs," ? ") --écriture de l'opération
        Démarrer le chronomètre --date où l'utilisateur commence à réfléchir (IN)
        Lire(result) --résultat de l'opération proposé par l'utilisateur
        Arrêter le chronomètre --date où l'utilisateur a répondu (IN)
        Calculer le délai --le temps mis pour répondre        (OUT)
        Sommer ce délai avec les délais des opérations précédentes dans Sum_Delay
        Si Delay_time est le nouveau plus grand délai alors
            Mettre à jour Max_Delay              
            Mémoriser le nombre de droite correspondant au nouveau délai dans Dalayed_Rhs
        Sinon
            Rien
        Fin Si
        Si result=table*rhs alors --si l'utilisateur a bien répondu
            Ecrire("Bravo!")
        Sinon
            Ecrire("Mauvaise réponse.")
            false_nbr= false_nbr+1
        Fin Si
    Fin Pour
    Donner des incitations et conseils selon le nombre de mauvaises réponses.
    Donner des incitations et conseils selon la valeur du délai max     

R4: Comment calculer le temps pris pour répondre à chaque opération et sommer ces délais?
    Pour i de 1 à 10 faire        
    --A l'intérieur de la boucle Pour i de 1 à 10
    --Après l'affichage de l'opération complète
        Op_Start<-Clock --date où l'utilisateur commence à réfléchir à la question
        Lire(result) --le résultat de l'opération, saisi par l'utilisateur
        Op_End<- Clock -- date où l'utilisateur fournit une réponse
        Delay_time<- Op_End - Op_Start -- le temps de réponse
        Sum_Delay <- Sum_Delay + Delay_time -- la somme des temps de réponse correspondant aux
                                            -- opérations précédentes de la même table
            .
            .
            .   

        
    
R5: Comment calculer la valeur max des délais?   
    Pour i de 1 à 10 faire        
        --Après que l'utilsateur ait saisi la réponse et que le délai Delay_time soit calculé
        Si Delay_time>Max_Delay alors --si le temps pris est supérieur aux valeurs précédentes
            Max_Delay<-Delay_time
            Delayed_Rhs<-rhs          --garder la valeur du nombre de droite correspondant
                                      --à l'opération qui a pris le plus de temps
        Sinon
            Rien
        Fin Si
     

R6 : Comment écrire des conseils selon le nombre de mauvaises réponses?
    --Après la fin de la boucle Pour i de 1 à 10    
    Selon false_nbr dans --selon le nombre de mauvaises réponses
        0 => Ecrire("Excellent! Aucune erreur.")
        1 => Ecrire("Une seule erreur. Très Bien.")
        10 => Ecrire("Tout est faux. Volontaire?")
        5..9 => Ecrire("Seulement ", 10 - false_nbr," bonnes réponses. Il faut apprendre la table de ",table,"!")
        2..4 => Ecrire(false_nbr," erreurs. Il faut encore travailler la table de ",table)
        Autre => Rien
    Fin selon



R7: Comment conseiller la révision d'une table selon les délais? 
    --Après la fin de la boucle Pour i de 1 à 10    
    Avg_Delay<- Sum_Delay/10.0 --Calcul de la valeur moyenne des délais pris pour répondre
    Si Max_Delay > Avg_Delay +1.0 alors --Si supérieur au temps moyen + 1 seconde
        Afficher("Des hésitations sur la table de ", Delayed_Rhs," : ", Max_Delay," secondes contre ",Avg_Delay," en moyenne. Il faut certainement la réviser.")
    Sinon
        Rien
    Fin si

R8 : Programme final.
=====[ Test ]===================================================================

* Expliquer rapidement comment vous avez testé votre programme.

--Je l'ai executé plusieurs fois en testant si le cahier de charge est respecté
--(en commettant un nombre de fautes différentes à chaque table, en prenant du
--temps pour répondre aux opérations, en saissant des tables supérieures à 10; etc.)


=====[ Difficultés ]============================================================

* Indiquer les difficultés rencontrées

--Les difficultés rencontrées avec Ada avaient plutôt un rapport avec la syntaxe: 
--j'ai essayé plus de fois que je n'ose l'admettre additionner des Durations 
--et des Float ou Integer.

--En ce qui concerne le Raffinage, je ne sais toujours pas comment procéder
--de façon à ne pas sauter de raffinages, surtout quand il s'agit d'instructions
--évidentes.

=====[ Questions ]==============================================================

Pour les questions suivantes, il ne s'agit pas de modifier le programme écrit
mais d'expliquer comment il faudrait le modifier pour prendre en compte les
évolutions envisagées.


* Au lieu de poser 10 questions, on veut en poser 15. Comment faire ?

--La boucle for ira de 1 à 15

--Il faudra ajuster les conseils et incitations qui dépendent du nombre de
--réponses fausses et les adapter à 15 réponses au lieu de 15.

--Le nombre de bonnes réponses sera égal à 15-false_nbr au lieu de 10-false_nbr

--Le temps moyen Avg_Delay devra être divisé par 15.0 au lieu de 10.0 .


* On veut afficher "Bien" si l'utilisateur n'a commis que 2 ou 3 erreurs.
  Comment modifier le programme ?

--Dans la structure de contrôle Selon, il va falloir traîter le cas de 4 mauvaises
--réponses individuellement. Puis ajouter le cas où false_nbr=2 ou false_nbr=3,
--et afficher "Bien." le cas échéant.


* On veut donner la possibilité à l'utilisateur d'abandonner le programme en
  tapant 0 quand on lui demande le résultat d'une multiplication. Quelles
  modifications faut-il alors faire au programme ? 

--D'abord, la boucle For deviendra une boucle Répeter en ajoutant la variable i
--qui est incrémentée de 1 jusqu'à 10 et une variable booléenne Q qui prendra True
--si l'utilisateur répond par 0. La condition de sortie de la boucle Répeter sera
--alors soit que Q=True soit que i=11 (pour que le cas de i=10 soit trâité). 
--En plus, il ne faudra pas afficher "Mauvaise réponse", mais plutôt traiter
--le cas où la réponse est 0 séparément avec une structure if:
--Si l'utilisateur répond par 0, Q prend True et on sort de la boucle Répéter.
--Ensuite, pour ne pas afficher de conseils selon le nombre de réponses fausses
--et le temps moyen de réponse ni demander si l'utilisateur veut continuer ou non,
--il va falloir mettre les instructions correspondantes
--sous une structure if qui contrôle si Q= False, auquel cas les conseils seront
--affichés, sinon, Q sera bien entendu True, et on pourra dans ce cas donner à continue
--False pour sortire de la toute première boucle répéter ou bien remplacer la condition
--de sortie de celle-ci par "exit when continue=False or Q=True".


* À la fin d'une série de questions, on veut proposer à l'utilisateur de
  réviser la table pour laquelle l'utilisateur a commis le plus d'erreurs.
  Par exemple, s'il se trompe pour 3 * 5, on compte une erreur pour 3 et
  une erreur pour 5.  Comment faire ?

--false_nbr est par défaut le nombre de faute commises pour le nombre de côté gauche
--(la table), il faut ainsi compter le nombre d'erreurs pour les nombres de côté droit,
--prendre celui pour lequel le plus d'erreurs ont été commises et le comparer avec
--false_nbr. Si false_nbr est supérieure, il faut réviser la même table, sinon, il
--faut travailler la table de multiplication du nombre de droite.


=====[ Remarques diverses ]=====================================================

Cette rubrique est libre (et ne sera pas prise en compte dans la notation).


--------------------------------------------------------------------------------
